import os
import cv2
import numpy as np
import yaml

def discretize_map(yaml_path, output_prefix="discretized_map"):
    """
    Loads a SLAM map saved as a YAML + PGM pair, isolates the explored area, and discretizes
    it into a 30x30 pixel image. Two versions are saved:
      1. Occupancy binary: occupied cells are black (0) and safe (free/unknown) are white (255).
      2. Exploration binary: explored areas (free or occupied) are white (255) and unexplored (unknown)
         are black (0).

    Parameters:
      yaml_path (str): Path to the YAML file generated by map_saver_cli.
      output_prefix (str): Prefix for the output image file names.

    The function will save two images:
      {output_prefix}_occupancy.png and {output_prefix}_explored.png.
    """
    # Load YAML file to get map metadata
    with open(yaml_path, 'r') as f:
        map_info = yaml.safe_load(f)
    
    # Construct the full path to the pgm file
    pgm_path = os.path.join(os.path.dirname(yaml_path), map_info["image"])
    
    # Load the pgm image as a grayscale image
    img = cv2.imread(pgm_path, cv2.IMREAD_GRAYSCALE)
    if img is None:
        raise FileNotFoundError(f"Could not load image from {pgm_path}")
    
    # For a trinary map (as indicated in the YAML), we assume:
    #   - Occupied: 0 (black)
    #   - Unknown (unexplored): 205 (grey)  <-- adjust if needed
    #   - Free: typically near white (e.g., 254)
    unknown_val = 205

    # --- Isolate the explored area ---
    # We define explored as any pixel that is not equal to the unknown value.
    explored_mask = (img != unknown_val)
    if np.any(explored_mask):
        coords = np.argwhere(explored_mask)
        # Bounding box of the explored region
        y0, x0 = coords.min(axis=0)
        y1, x1 = coords.max(axis=0) + 1  # add 1 since slicing is exclusive at the end
        cropped = img[y0:y1, x0:x1]
    else:
        # If no pixel is explored, fall back to using the full image
        cropped = img.copy()

    # --- Create the occupancy binary map ---
    # For occupancy, we assume a pixel is occupied if its value is 0.
    # Everything else (free or unknown) is considered safe (white).
    occupancy_binary = np.where(cropped == 0, 0, 255).astype(np.uint8)

    # print(cropped)

    # --- Create the exploration binary map ---
    # For exploration, a pixel is considered explored if it is not unknown.
    # So, pixels equal to unknown_val become black, and the rest white.
    explored_binary = np.where(cropped == unknown_val, 0, 255).astype(np.uint8)

    # --- Resize to 30x30 while preserving aspect ratio ---
    target_dim = 30
    h, w = cropped.shape
    # Compute scale factor to fit the ROI within target_dim x target_dim
    scale = min(target_dim / w, target_dim / h)
    new_w = int(round(w * scale))
    new_h = int(round(h * scale))
    
    # Resize using nearest-neighbor to preserve the binary nature
    occupancy_resized = cv2.resize(occupancy_binary, (new_w, new_h), interpolation=cv2.INTER_NEAREST)
    explored_resized = cv2.resize(explored_binary, (new_w, new_h), interpolation=cv2.INTER_NEAREST)

    # --- Pad the resized image to be exactly 30x30 ---
    # For occupancy: pad with white (255) because white means safe
    pad_vert = target_dim - new_h
    pad_horz = target_dim - new_w
    pad_top = pad_vert // 2
    pad_bottom = pad_vert - pad_top
    pad_left = pad_horz // 2
    pad_right = pad_horz - pad_left

    occupancy_final = cv2.copyMakeBorder(occupancy_resized, pad_top, pad_bottom, pad_left, pad_right,
                                         borderType=cv2.BORDER_CONSTANT, value=255)
    # For exploration: pad with black (0) because black represents unexplored
    explored_final = cv2.copyMakeBorder(explored_resized, pad_top, pad_bottom, pad_left, pad_right,
                                        borderType=cv2.BORDER_CONSTANT, value=0)

    # --- Save the output images ---
    occupancy_outfile = f"{output_prefix}_occupancy.png"
    explored_outfile = f"{output_prefix}_explored.png"
    cv2.imwrite(occupancy_outfile, occupancy_final)
    cv2.imwrite(explored_outfile, explored_final)
    print(f"Saved occupancy binary map as {occupancy_outfile}")
    print(f"Saved exploration binary map as {explored_outfile}")

# Example usage:
discretize_map("maps/robot1_map.yaml", output_prefix="robot1_map_30x30")
